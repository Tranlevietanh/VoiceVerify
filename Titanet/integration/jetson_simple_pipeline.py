"""
Pipeline ƒë∆°n gi·∫£n cho Jetson
"""

import torch
import os
import numpy as np
from speaker_verification_pipeline import SpeakerVerificationPipeline
from jetson_config import get_jetson_config

class JetsonSpeakerPipeline:
    """Pipeline ƒë∆°n gi·∫£n cho Jetson"""
    
    def __init__(self):
        self.config = get_jetson_config()
        self.pipeline = None
        self.model = None
        
    def setup_model(self):
        """Setup model v·ªõi c·∫•u h√¨nh Jetson"""
        try:
            # T·∫°o pipeline v·ªõi config ƒë∆°n gi·∫£n
            pipeline_config = type('Config', (), {})()
            pipeline_config.titanet_model_path = self.config.get_model_path()
            pipeline_config.device = self.config.device
            pipeline_config.target_sample_rate = self.config.sample_rate
            pipeline_config.similarity_threshold = self.config.similarity_threshold
            pipeline_config.temp_dir = self.config.temp_dir
            
            self.pipeline = SpeakerVerificationPipeline(pipeline_config)
            print(f"‚úÖ ƒê√£ setup model th√†nh c√¥ng tr√™n {self.config.device}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói setup model: {e}")
            return False
    
    def preprocess_audio(self, audio_path):
        """Ti·ªÅn x·ª≠ l√Ω audio ƒë∆°n gi·∫£n"""
        try:
            if self.pipeline:
                return self.pipeline.preprocess_audio(audio_path)
            else:
                print("‚ùå Pipeline ch∆∞a ƒë∆∞·ª£c setup")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói preprocess audio: {e}")
            return None
    
    def extract_embedding(self, audio_path):
        """Tr√≠ch xu·∫•t embedding"""
        try:
            if self.pipeline:
                return self.pipeline.extract_embedding(audio_path)
            else:
                print("‚ùå Pipeline ch∆∞a ƒë∆∞·ª£c setup")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói extract embedding: {e}")
            return None
    
    def verify_speaker(self, test_audio, enrolled_audio):
        """X√°c th·ª±c speaker"""
        try:
            if self.pipeline:
                return self.pipeline.verify_speaker(test_audio, enrolled_audio)
            else:
                print("‚ùå Pipeline ch∆∞a ƒë∆∞·ª£c setup")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói verify speaker: {e}")
            return None
    
    def get_memory_usage(self):
        """L·∫•y th√¥ng tin memory usage"""
        try:
            if torch.cuda.is_available():
                gpu_memory = torch.cuda.memory_allocated() / 1024 / 1024  # MB
                gpu_max = torch.cuda.max_memory_allocated() / 1024 / 1024  # MB
                return {
                    'gpu_current_mb': gpu_memory,
                    'gpu_max_mb': gpu_max
                }
        except:
            pass
        return {'gpu_current_mb': 0, 'gpu_max_mb': 0}
    
    def clear_cache(self):
        """X√≥a cache ƒë·ªÉ gi·∫£i ph√≥ng memory"""
        try:
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
            print("‚úÖ ƒê√£ x√≥a cache")
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a cache: {e}")

def create_jetson_pipeline():
    """T·∫°o pipeline Jetson ƒë∆°n gi·∫£n"""
    pipeline = JetsonSpeakerPipeline()
    
    # Setup model
    if pipeline.setup_model():
        print("üéâ Jetson Pipeline s·∫µn s√†ng!")
        return pipeline
    else:
        print("‚ùå Kh√¥ng th·ªÉ t·∫°o pipeline")
        return None

if __name__ == "__main__":
    print("=== Test Jetson Speaker Pipeline ===")
    
    # T·∫°o pipeline
    pipeline = create_jetson_pipeline()
    
    if pipeline:
        # Ki·ªÉm tra memory
        memory_info = pipeline.get_memory_usage()
        print(f"GPU Memory: {memory_info['gpu_current_mb']:.1f}MB")
        
        # Test v·ªõi file audio n·∫øu c√≥
        test_audio = "/home/edabk/Titanet/integration/test.wav"  # Thay ƒë·ªïi path n√†y
        
        if os.path.exists(test_audio):
            print(f"Testing v·ªõi {test_audio}...")
            embedding = pipeline.extract_embedding(test_audio)
            if embedding is not None:
                print(f"‚úÖ Embedding shape: {embedding.shape}")
            else:
                print("‚ùå Kh√¥ng th·ªÉ extract embedding")
        else:
            print(f"File test kh√¥ng t·ªìn t·∫°i: {test_audio}")
        
        # Clear cache
        pipeline.clear_cache()
    
    print("Ho√†n th√†nh test!")